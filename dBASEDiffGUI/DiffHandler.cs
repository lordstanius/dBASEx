using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Text;
using dBASE.NET;
using dBASE.NET.Tools;
using Ionic.Zip;

namespace dBASEDiffGUI
{
    public class DiffHandler
    {
        private readonly List<Pair> _trackedFiles = new List<Pair>();
        private readonly string _tempPath = Path.Combine(Path.GetTempPath(), "dBASE_Diff_Files");
        private readonly string _zipPath = Path.Combine(Path.GetTempPath(), "diffs.zip");

        public bool IsTracking { get; set; }

        public void Enumerate(string path)
        {
            _trackedFiles.Clear();

            foreach (string originalFile in Directory.GetFiles(path, "*.dbf", SearchOption.AllDirectories))
            {
                string tempDir = Path.GetTempPath();

                if (!Directory.Exists(_tempPath))
                    Directory.CreateDirectory(_tempPath);


                string copyName = Guid.NewGuid().ToString("B");
                string copyOfPath = Path.Combine(_tempPath, copyName);
                File.Copy(originalFile, copyOfPath);

                string memoPath = Path.ChangeExtension(originalFile, "FPT");

                if (File.Exists(memoPath))
                    File.Copy(memoPath, Path.ChangeExtension(copyOfPath, "FPT"));

                _trackedFiles.Add(new Pair(copyOfPath, originalFile));
            }
        }

        public void SendResult(string email, string password)
        {
            var fromAddress = new MailAddress(email);
            var toAddress = new MailAddress(email);
            const string subject = "Observed changes in dBASE files.";
            const string body = "This message is autogenerated by dBASE Diff GUI";

            var smtp = new SmtpClient("smtp.gmail.com", 587)
            {
                EnableSsl = true,
                Credentials = new NetworkCredential(fromAddress.Address, password)
            };

            using (var message = new MailMessage(fromAddress, toAddress)
            {
                Subject = subject,
                Body = body,
            })
            {
                message.Attachments.Add(new Attachment(CreateDiffResult()));
                smtp.Send(message);
            }
        }

        public string CreateDiffResult()
        {
            File.Delete(_zipPath);
            using (var zip = new ZipFile(_zipPath))
            {
                zip.CompressionLevel = Ionic.Zlib.CompressionLevel.BestCompression;
                foreach (Pair pair in _trackedFiles)
                {
                    string content = pair.CreateDiff();
                    string diffPath = pair.Original + ".diff";
                    File.WriteAllText(diffPath, $"{pair.Modified}{Environment.NewLine}{content}");
                    zip.AddFile(diffPath, "\\");
                }

                zip.Save();
            }

            return _zipPath;
        }

        public void Cleanup()
        {
            File.Delete(_zipPath);
            if (Directory.Exists(_tempPath))
                Directory.Delete(_tempPath, true);
        }

        class Pair
        {
            public Pair(string pathToOriginal, string pathToModified)
            {
                Original = pathToOriginal;
                Modified = pathToModified;
            }

            public string Original { get; }
            public string Modified { get; }

            public string CreateDiff()
            {
                var encoding = Encoding.GetEncoding(1252);
                var diff = new DbfDiff(new Dbf(Original, encoding), new Dbf(Modified, encoding));

                return diff.Serialize();
            }
        }
    }
}
